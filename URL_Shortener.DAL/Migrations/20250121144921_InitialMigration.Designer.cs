// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using URL_Shortener.DAL;

#nullable disable

namespace URL_Shortener.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250121144921_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47e17bad-e591-4084-b31c-40c1e4859bd7",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "1c1ebabd-6745-4fc2-808d-48df8107736c",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1ec6d434-ef87-4d40-a16b-15195cff094f",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "0a6a73d6-3e34-4a43-90c3-5e78a3d984b2",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "cae16653-8b16-4b2f-99d8-b62125b0ca65",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "2c7ea02a-93f3-4cd8-9bbd-6df65fd019cb",
                            RoleId = "47e17bad-e591-4084-b31c-40c1e4859bd7"
                        },
                        new
                        {
                            UserId = "0ae67c27-0915-4f7a-8385-38850e6f8f3d",
                            RoleId = "47e17bad-e591-4084-b31c-40c1e4859bd7"
                        },
                        new
                        {
                            UserId = "40b29fac-8c21-4212-bd4c-ef469b5209e1",
                            RoleId = "47e17bad-e591-4084-b31c-40c1e4859bd7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.Url", b =>
                {
                    b.Property<long>("UrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UrlId"));

                    b.Property<string>("ShortenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlCreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UrlId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Urls");
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.UserAccount", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserAccount");

                    b.HasData(
                        new
                        {
                            Id = "1ec6d434-ef87-4d40-a16b-15195cff094f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e387cc8e-e35a-41fe-b8a7-6fb116f3b3e1",
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKIAVdRRQEvHdn9Jj1DxrN6EmwbFzNZ4oVzZjkCzrKAC0/BBoTw2fven3Ujk3r/AnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a859b115-b434-4113-8409-d5c82c292c3f",
                            TwoFactorEnabled = false,
                            UserName = "User1",
                            Name = "User1"
                        },
                        new
                        {
                            Id = "0a6a73d6-3e34-4a43-90c3-5e78a3d984b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73e2a513-f136-4008-904c-f424d2e197ae",
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENoKMtG3IAQ4/7Tx8tjlO09Xo/dnnTd7tO1qKsHlKQdixdIpT8/sII4/CjFVwv5xJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88d9db33-45ab-4aa7-b795-88bae1e5e8f1",
                            TwoFactorEnabled = false,
                            UserName = "User2",
                            Name = "User2"
                        },
                        new
                        {
                            Id = "cae16653-8b16-4b2f-99d8-b62125b0ca65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89242b54-611f-4e84-9cdc-f01eaf965003",
                            Email = "user3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAECFJ1oIARwHPwz6vpe1LcmzweW+UcPS03NEIcq2ckCYTuduGw1Avr0atd+ySkDv17w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "02abd987-cbbc-4d59-8647-a5c06fd5e272",
                            TwoFactorEnabled = false,
                            UserName = "User3",
                            Name = "User3"
                        },
                        new
                        {
                            Id = "2c7ea02a-93f3-4cd8-9bbd-6df65fd019cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "697a3a89-ecca-43d8-a1df-34097f2c9342",
                            Email = "admin1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEUZzw/kqkQq5atRoCS9MdypjcyXuf73bsNrrZxiB8M0w/84Mk0ieGHRC9X+togebg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c84b0e0-781c-4818-95b6-d4d23fdc11cb",
                            TwoFactorEnabled = false,
                            UserName = "Admin1",
                            Name = "Admin1"
                        },
                        new
                        {
                            Id = "0ae67c27-0915-4f7a-8385-38850e6f8f3d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5cd98f9-f581-42fb-bc05-8c024ba31486",
                            Email = "admin2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKLL9oZvNRbWkrcpUDTIq4m/FIjFs98JaahRITT0utJxpwEPFgV17axRRlohDaMnQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac384698-28a5-4163-b471-7e7c8c894c69",
                            TwoFactorEnabled = false,
                            UserName = "Admin2",
                            Name = "Admin2"
                        },
                        new
                        {
                            Id = "40b29fac-8c21-4212-bd4c-ef469b5209e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5604de06-9340-473a-92d8-508d7c2d3668",
                            Email = "admin3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELzx2Igstm5XVh+u4mrZKCXPOZL/j6dwxrqDuXdAbswM/nw27cgll4IDhZIsBKG1+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acb40238-8251-425b-bee4-a767102dead4",
                            TwoFactorEnabled = false,
                            UserName = "Admin3",
                            Name = "Admin3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.Url", b =>
                {
                    b.HasOne("URL_Shortener.DAL.Entities.UserAccount", "UserAccount")
                        .WithMany("Urls")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.UserAccount", b =>
                {
                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
