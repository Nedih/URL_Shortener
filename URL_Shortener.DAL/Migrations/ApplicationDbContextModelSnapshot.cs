// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using URL_Shortener.DAL;

#nullable disable

namespace URL_Shortener.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47e17bad-e591-4084-b31c-40c1e4859bd7",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "1c1ebabd-6745-4fc2-808d-48df8107736c",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "12063cdc-e45b-4f66-bd3f-119a7a4a8c5c",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "23bf6bff-f538-4d72-b79a-6efbf0dc9965",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "26bf362a-f68a-4f5c-8021-2e1c5557a679",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "5a69fcba-2888-437b-9bd9-777e94f13d94",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "17643fd0-ade1-4c40-ba60-07758bcead9e",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "237aa5f1-a53c-4828-ba17-4820e987bba2",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.Url", b =>
                {
                    b.Property<long>("UrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UrlId"));

                    b.Property<string>("ShortenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlCreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UrlId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Urls");
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.UserAccount", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserAccount");

                    b.HasData(
                        new
                        {
                            Id = "12063cdc-e45b-4f66-bd3f-119a7a4a8c5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d30fa888-b59c-4c07-9d40-a87296428505",
                            Email = "admin1@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@ADMIN.COM",
                            NormalizedUserName = "ADMIN1@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENT9FNckgudXJFOnbCb5kcmgKzupS4qRvVzKrqGiuFYRRFN66Y5LX7wOMW8L+0oOHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e405c43b-4c6d-432e-931b-a8c9aba95133",
                            TwoFactorEnabled = false,
                            UserName = "admin1@admin.com",
                            Name = "Admin3"
                        },
                        new
                        {
                            Id = "23bf6bff-f538-4d72-b79a-6efbf0dc9965",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f3027c0-a6ff-40f1-83a9-ded5533e5d59",
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER1@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAQcZd8ALkxLlNdz1cwFpYl5/xQBZo9cLPxSuXPUpPk1P/5NFnQV7q3pujjlXFykyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49b998be-94ea-452c-bf1e-3d42df643758",
                            TwoFactorEnabled = false,
                            UserName = "user1@user.com",
                            Name = "User1"
                        },
                        new
                        {
                            Id = "26bf362a-f68a-4f5c-8021-2e1c5557a679",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5568cc69-9041-41e6-89c4-53ef862e5dab",
                            Email = "admin2@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@ADMIN.COM",
                            NormalizedUserName = "ADMIN2@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIZQvfnd4AKhUWOr/k67RsRq3pW0l1ujaX0WyzCR7Tj5rqJoLrLKtUcE1y7TC3XhWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "731aa9b4-2b53-436c-a165-a688448dab07",
                            TwoFactorEnabled = false,
                            UserName = "admin2@admin.com",
                            Name = "Admin3"
                        },
                        new
                        {
                            Id = "5a69fcba-2888-437b-9bd9-777e94f13d94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79ffcf97-3472-4cfa-91f2-1837a90dd83f",
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@USER.COM",
                            NormalizedUserName = "USER2@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3xavumcyiSPoA45UihuZDzistz2Oo0KSn4zAppNBe1Dy5bCkN2mrpiGYUnjd/YSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b34b3ba-246a-48a7-a9c5-4f9f9354b9d3",
                            TwoFactorEnabled = false,
                            UserName = "user2@user.com",
                            Name = "User1"
                        },
                        new
                        {
                            Id = "17643fd0-ade1-4c40-ba60-07758bcead9e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8baf08d2-fc98-43be-8a92-e13b7c9c300f",
                            Email = "admin3@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@ADMIN.COM",
                            NormalizedUserName = "ADMIN3@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVN5b4myDK37yauuHnuA0sndwPiwPHxDnaDwT3XivZTaomgJI+aE/+3aACYyOXayA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b5ebef1-689b-49d0-881e-8278c64b7398",
                            TwoFactorEnabled = false,
                            UserName = "admin3@admin.com",
                            Name = "Admin3"
                        },
                        new
                        {
                            Id = "237aa5f1-a53c-4828-ba17-4820e987bba2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d3f99a6-65f6-4ea9-830a-895a380ba468",
                            Email = "user3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@USER.COM",
                            NormalizedUserName = "USER3@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMAKgF0b12DMsWhMAg/TDCdFCz+TsmvuiXbXaYc9i/GFH/s9Ut1bmrzZ6cnUY0gQvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc51601d-1b79-4319-bbe9-cb8fdeae8fb7",
                            TwoFactorEnabled = false,
                            UserName = "user3@user.com",
                            Name = "User1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.Url", b =>
                {
                    b.HasOne("URL_Shortener.DAL.Entities.UserAccount", "UserAccount")
                        .WithMany("Urls")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.UserAccount", b =>
                {
                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
