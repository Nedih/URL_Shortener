// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using URL_Shortener.DAL;

#nullable disable

namespace URL_Shortener.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47e17bad-e591-4084-b31c-40c1e4859bd7",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "1c1ebabd-6745-4fc2-808d-48df8107736c",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "09094db5-18cb-458b-a692-593a49be22ac",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "393560c1-08a4-432e-aea3-efaf5015b512",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "98c4f332-e1fe-42ae-8ec3-37d2ea1a407b",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "6a752942-d533-4e69-a832-a6fc7c975518",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "be1fff33-2672-4ae4-9a4e-72143b5a9afa",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        },
                        new
                        {
                            UserId = "81f99f48-c0bc-457d-ba51-f8a0c7114145",
                            RoleId = "1c1ebabd-6745-4fc2-808d-48df8107736c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.Url", b =>
                {
                    b.Property<long>("UrlId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortenUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlCreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UrlId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Urls");
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.UserAccount", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("UserAccount");

                    b.HasData(
                        new
                        {
                            Id = "09094db5-18cb-458b-a692-593a49be22ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3807a0de-15b1-4a56-877d-882a7b38c48b",
                            Email = "admin1@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@ADMIN.COM",
                            NormalizedUserName = "ADMIN1@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA5dfAzAOBCmSM0PnEkF6Ea4xMmr70tQ8z0khnUDdwpJHmhRkv9ZExJsPGa8Xc7RWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fa422ec-6981-448c-8d68-a432a5b2f46f",
                            TwoFactorEnabled = false,
                            UserName = "admin1@admin.com",
                            Name = "Admin1"
                        },
                        new
                        {
                            Id = "393560c1-08a4-432e-aea3-efaf5015b512",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de308398-36be-4af5-9a5d-5a62b074871f",
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER1@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAwYIJ/vqG1LOif3jAUh5pCO6n/kZewBJ1H23vTIpbn9UgXyByK+06FqK1Qxz6Zcdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1c632f4-1a77-4de9-bbe2-4a0a308bfb4b",
                            TwoFactorEnabled = false,
                            UserName = "user1@user.com",
                            Name = "User1"
                        },
                        new
                        {
                            Id = "98c4f332-e1fe-42ae-8ec3-37d2ea1a407b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cde941c9-a1f6-4c32-8901-124ffa560b9d",
                            Email = "admin2@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@ADMIN.COM",
                            NormalizedUserName = "ADMIN2@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEILTweExGcKkHYRqhtOah/lGWUITcgKzGhXcqKh+ayKjyzJCunn1HECpvIYyo6Ex3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73ec830a-81d3-492a-8283-35256b8d0cab",
                            TwoFactorEnabled = false,
                            UserName = "admin2@admin.com",
                            Name = "Admin2"
                        },
                        new
                        {
                            Id = "6a752942-d533-4e69-a832-a6fc7c975518",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4af03a00-e5b9-45c8-b645-f92b825da0fd",
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@USER.COM",
                            NormalizedUserName = "USER2@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPwAq9fKJ+PWrLVAeNzKxdi3Nf3gZIEzYmwuj39hfQY9G6jBpyTAFvZdqxo74nV+vw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bce45702-7c7a-4575-ac82-50a0ba526b3e",
                            TwoFactorEnabled = false,
                            UserName = "user2@user.com",
                            Name = "User2"
                        },
                        new
                        {
                            Id = "be1fff33-2672-4ae4-9a4e-72143b5a9afa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4abc7c19-f5b6-47f3-a9d8-cc96d1c3fc3e",
                            Email = "admin3@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@ADMIN.COM",
                            NormalizedUserName = "ADMIN3@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENmQ63X07hx7tuJV4mMxFhMGN5qknmHGTFOUoAgcYYKFN9lPkgx0KNppsnbDtT6TzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b047098-16a6-48b8-8bff-34160ebe6d37",
                            TwoFactorEnabled = false,
                            UserName = "admin3@admin.com",
                            Name = "Admin3"
                        },
                        new
                        {
                            Id = "81f99f48-c0bc-457d-ba51-f8a0c7114145",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af7c7e7c-f0a9-4810-96c8-68b0e99ea886",
                            Email = "user3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@USER.COM",
                            NormalizedUserName = "USER3@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECxu+Dhn4/HrbRegeidb307cYLqtMPIpH0ADNSWi4RUQua8Y4Qex8Fze1useIgQzeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b886dc-d199-4acb-945b-a5b703de01ad",
                            TwoFactorEnabled = false,
                            UserName = "user3@user.com",
                            Name = "User3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.Url", b =>
                {
                    b.HasOne("URL_Shortener.DAL.Entities.UserAccount", "UserAccount")
                        .WithMany("Urls")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("URL_Shortener.DAL.Entities.UserAccount", b =>
                {
                    b.Navigation("Urls");
                });
#pragma warning restore 612, 618
        }
    }
}
